Prompt: Code the classic game battleship in C++

Response:
#include <iostream>
#include <vector>

const int BOARD_SIZE = 10;

// The Ship class represents a single ship on the board.
class Ship {
 public:
  Ship(int length) : length_(length), hits_(0) {}

  // Attempts to hit the ship at the given coordinates.
  // Returns true if the attack was successful, false otherwise.
  bool Attack(int x, int y) {
    // Check if the attack hit one of the ship's squares.
    for (const auto& square : squares_) {
      if (square.x == x && square.y == y) {
        // If so, increment the number of hits the ship has sustained
        // and return true.
        ++hits_;
        return true;
      }
    }
    // Otherwise, the attack missed, so return false.
    return false;
  }

  // Places the ship on the board.
  // Returns false if the ship cannot be placed at the given coordinates,
  // because it would extend beyond the edges of the board or overlap with
  // another ship, and true otherwise.
  bool Place(int x, int y, bool is_horizontal, std::vector<std::vector<int>>& board) {
    // Check if the ship would extend beyond the right edge of the board.
    if (is_horizontal && x + length_ > BOARD_SIZE) {
      return false;
    }
    // Check if the ship would extend beyond the bottom edge of the board.
    if (!is_horizontal && y + length_ > BOARD_SIZE) {
      return false;
    }

    // Check if any of the squares the ship would occupy are already occupied.
    for (int i = 0; i < length_; ++i) {
      if (is_horizontal) {
        if (board[y][x + i] != 0) {
          return false;
        }
      } else {
        if (board[y + i][x] != 0) {
          return false;
        }
      }
    }

    // If none of the above checks failed, the ship can be placed.
    // So, update the board to reflect this and store the ship's squares.
    for (int i = 0; i < length_; ++i) {
      if (is_horizontal) {
        board[y][x + i] = 1;
        squares_.emplace_back(x + i, y);
      } else {
        board[y + i][x] = 1;
        squares_.emplace_back(x, y + i);
      }
    }
    return true;
  }

  // Returns true if the ship has been sunk (i.e., all of its squares have been hit),
  // and false otherwise.
  bool IsSunk() const {
    return hits_ == length_;
  }

 private:
  // The length of the ship.
  int length_;
  // The number of squares on the ship that have been hit.
  int hits_;
  // The squares occupied by the ship.
  std::vector<std::pair<int, int>> squares_;
};
